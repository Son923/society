---
description: Rules for javascript
globs: *.js
alwaysApply: false
---
# JavaScript Coding Rules for Society Fail

## Module Structure
- Use ES6 modules exclusively with `import` and `export` statements
- Each file should handle a specific game system or related functionality
- Group related functions in a single module
- Export only what's needed as a public API

## Imports and Exports
- Always list imports at the top of the file
- Order imports: first external libraries, then internal modules
- Use named exports for most functions: `export function functionName() {}`
- Use default exports sparingly and only for primary module components

## State Management
- Always access game state through the `gameState` object imported from [settings.js](mdc:javascript/settings.js)
- Never modify gameState directly in a component without using appropriate update functions
- Call `updateGameState()` after making changes to sync the UI
- Call `saveGameState()` after significant changes or at appropriate intervals

## Function Organization
- Organize functions in logical groups:
  1. Initialize/setup functions at the top
  2. Core functionality functions in the middle
  3. Helper/utility functions toward the end
  4. Event handlers and UI update functions at the end
- Only expose functions that need to be public

## Documentation
- Use JSDoc comment blocks for all exported functions:
```javascript
/**
 * Description of what the function does.
 * @param {type} paramName - Description of parameter
 * @returns {type} Description of return value
 */
```
- Add single-line comments for complex logic within functions
- Include block comments before logical sections of code
- Document all state properties and their purpose

## Naming Conventions
- Use camelCase for variables and functions: `resourceAmount`, `updatePartyStats()`
- Use PascalCase for classes: `PartyMember`
- Use UPPER_SNAKE_CASE for constants: `TICK_INTERVAL`, `MAX_PARTY_SIZE`
- Prefix boolean variables with "is", "has", or similar: `isDisabled`, `hasMember`
- Be descriptive with names - avoid abbreviations except for common ones

## UI Interaction
- Add event listeners in dedicated setup functions
- Use proper event delegation when appropriate
- Update UI with dedicated `updateXXXUI()` functions
- Create and append HTML with template literals
- Use `createLucideIcons()` after adding new icons to the DOM

## Error Handling
- Validate inputs at the beginning of functions
- Check for existence of DOM elements before manipulating them
- Use console.log for development debugging, but keep these minimal in production
- Provide meaningful error messages

## Global Namespace
- Avoid polluting the global namespace
- Only expose functions to `window` when necessary for event handlers
- When exposing to window, document the reason with a comment

## HTML Generation
- Use template literals for generating HTML
- Include appropriate data attributes for event binding
- Add clear class names based on functionality

## Game Mechanics Consistency
- Follow the progression mechanics defined in [game-mechanics.mdc](mdc:.cursor/rules/game-mechanics.mdc)
- Respect resource balancing formulas
- Maintain the three-age progression system
- Keep the dark and mysterious theme consistent

## Performance Considerations
- Cache DOM selections when used repeatedly
- Batch DOM updates when possible
- Use requestAnimationFrame for animations
- Avoid unnecessary recalculations in update loops

## Styling Integration
- Use data-lucide attributes for icons
- Apply consistent CSS classes for similar elements
- Follow the color scheme defined in the stylesheets