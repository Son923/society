---
description: CSS rules
globs: *.css
alwaysApply: false
---
# CSS Coding Rules for Society Fail

## File Organization
- Each component or module should have its own CSS file (e.g., [farming.css](mdc:stylesheets/farming.css), [party.css](mdc:stylesheets/party.css), etc)
- Follow the existing structure in the stylesheets directory
- Core styles are split across different files:
  - [reset.css](mdc:stylesheets/reset.css) - Browser normalization
  - [base.css](mdc:stylesheets/base.css) - Foundation styles
  - [typography.css](mdc:stylesheets/typography.css) - Text styling
  - [buttons.css](mdc:stylesheets/buttons.css) - Button components
  - [shell.css](mdc:stylesheets/shell.css) - Layout structure
  - [modules.css](mdc:stylesheets/modules.css) - Module containers
  - [utils.css](mdc:stylesheets/utils.css) - Utility classes

## Modern CSS Practices
- Use CSS nesting for component structure
- Only use the `&` parent selector when necessary (avoid overuse)
- Utilize logical properties when appropriate (e.g., margin-block, padding-inline)
- Employ CSS variables for theming and recurring values
- Use modern selectors like :is() and :where() for grouping

## Naming Conventions
- Use kebab-case for class names: `.resource-container`, `.party-member`
- Use descriptive, functional names that reflect purpose
- Follow component-based naming: `.module-name__element--modifier`
- Organize classes from general to specific
- Avoid unnecessary abbreviations

## Selectors
- Keep selectors simple and focused
- Avoid deep nesting (maximum 3 levels)
- Minimize use of ID selectors (#id)
- Prefer class selectors for reusability
- Avoid overqualified selectors (e.g., div.container)

## Color System
- Use the established color palette:
  - Dark backgrounds for main UI
  - Red/dark yellow for food
  - Blue for water
  - Green for wood/nature
  - Red for errors/warnings
  - Purple/dark purple for knowledge and corruption
- Apply consistent status colors:
  - Green for positive/high
  - Yellow/orange for medium
  - Red for negative/low
- Maintain the dark, mysterious apocalyptic theme

## Layout and Sizing
- Use CSS Grid for complex layouts
- Use Flexbox for alignment and simpler layouts
- Prefer relative units (rem, em, %) over pixels
- Apply consistent spacing using the established spacing scale
- Account for various screen sizes with responsive design

## Typography
- Follow the existing typography scale in typography.css
- Use established text styles for consistency
- Maintain readability against the dark backgrounds
- Apply proper text contrast for accessibility

## Icons and Visual Elements
- Maintain consistent icon sizing within context
- Apply color classes to icons consistently:
  - .icon-dark for main icons
  - .red, .blue, .green, etc. for resource-specific icons
  - .gutter-grey for secondary icons
- Ensure proper spacing around icons
- Follow the established visual hierarchy

## Components
- Style components as self-contained units
- Use consistent styling for similar components
- Maintain clear visual states (default, hover, active, disabled)
- Use appropriate transitions for state changes
- Follow the dark theme aesthetic established in the game

## Progress Bars
- Use the established progress bar structure:
  - .progress-bar as container
  - .progress as the fill element
  - Apply appropriate modifier classes (.health-bar, .hunger-bar, etc.)
  - Include .high, .medium, .low classes for status

## Modules
- Follow the established module structure:
  - .module as the container
  - Module header with icon and title
  - Consistent internal padding
  - Clear separation between modules
- Use .module-content for the inner container
- Apply .collapsible for expandable sections

## Animation and Transitions
- Keep animations subtle and purposeful
- Use short durations (200-300ms) for UI interactions
- Apply easing functions appropriately
- Ensure animations don't interfere with gameplay
- Consider reducing motion for accessibility

## Responsive Design
- Design mobile-first, then enhance for larger screens
- Use media queries strategically
- Ensure the game is playable on different devices
- Simplify complex layouts on smaller screens
- Maintain touch-friendly target sizes on mobile (minimum 44px)

## Utilities
- Use utility classes for common patterns
- Apply consistent naming: .text-center, .flex-row, .hidden
- Keep utility classes focused on a single responsibility
- Document utility classes for team reference

## Performance
- Minimize use of expensive properties (box-shadow, filters, etc.)
- Avoid unnecessary specificity
- Use hardware acceleration for animations when appropriate
- Optimize selectors for rendering performance

## Dark Theme Considerations
- Ensure sufficient contrast for readability
- Use subtle gradients for depth
- Employ darker shades for backgrounds, lighter for interaction elements
- Apply appropriate focus states for keyboard navigation
- Maintain the post-apocalyptic atmosphere through styling